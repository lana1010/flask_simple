# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "master" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.


name: Deploy to AWS S3-Beanstalk

on:
  push:
    branches: [ "master" ]

env:
  S3_BUCKET_NAME                              : "lana-flask-app-packages"
  EB_APPLICATION_NAME                         : "lana-flask-simple"  
  EB_ENVIRONMENT_NAME                         : "lana-flask-simple-env"
  DEPLOY_PACKAGE_NAME                         : "flask_app_${{github.sha}}.zip"
  AWS_REGION                                  : "us-east-1"                            # set this to your preferred AWS region

permissions:
  contents: read

jobs:
  upload:
    name: Upload
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout. Clone Git repo
      uses: actions/checkout@v3
    
    - name: Create ZIP package
      run : zip -r ${{ env.DEPLOY_PACKAGE_NAME }} ./ -x *.git*
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.FLASK_AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.FLASK_AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}   
        
    - name: Copy Deployment package to S3 bucket
      run : aws s3 cp ${{env.DEPLOY_PACKAGE_NAME}} s3://${{env.S3_BUCKET_NAME}}/
      
    - name: Print log message
      run : echo "zip copied to S3 bucket successfully!"
      
  deploy:
    name: Deploy to AWS Beanstalk
      runs-on: ubuntu-latest
      needs: [upload]

      steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.FLASK_AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.FLASK_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
    
      - name: Create new ElasticBeanstalk Application Version
        run : |
          aws elasticbeanstalk create-application-version \
          --application-name ${{ env.EB_APPLICATION_NAME }} \
          --source-bundle S3Bucket="${{ env.S3_BUCKET_NAME }}",S3Key="${{ env.DEPLOY_PACKAGE_NAME }}" \
          --version-label "Ver-${{ github.sha }}" \
          --description "CoimmitSHA-${{ github.sha }}"
       
      - name: Deploy new ElasticBeanstalk Application Version
        run : aws elasticbeanstalk update-environment --environment-name ${{ env.EB_ENVIRONMENT_NAME }} --version-label "Ver-${{ github.sha }}"
      
      - name: Print Well Done Message for CD finish
        run : echo "CD Pipeline part Finished Successfully!"      

    
